{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Governing Equations of Motion Projectile motion is governed by Newtonian mechanics. Assuming no air resistance, the motion can be described using kinematic equations under uniform gravitational acceleration. Equations of Motion The position of the projectile as a function of time can be written as: \\(x(t) = v_0\\cos(\\theta)t\\) \\(y(t) = v_0\\sin(\\theta)t - \\frac{1}{2}gt^2\\) where: - \\(x(t)\\) and \\(y(t)\\) are the horizontal and vertical positions at time \\(t\\) , - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the angle of projection, - \\(g\\) is the acceleration due to gravity. Solving the Differential Equations From Newton\u2019s Second Law, the acceleration components are: \\[\\frac{d^2x}{dt^2} = 0, \\quad \\frac{d^2y}{dt^2} = -g\\] Integrating these equations: \\[\\frac{dx}{dt} = v_0\\cos(\\theta), \\quad \\frac{dy}{dt} = v_0\\sin(\\theta) - gt\\] Another integration gives: \\[x = v_0\\cos(\\theta)t$$ $$y = v_0\\sin(\\theta)t - \\frac{1}{2}gt^2\\] Time of Flight, Maximum Height, and Range Time of Flight The time when the projectile returns to the ground \\(y = 0\\) : \\[0 = v_0\\sin(\\theta)t - \\frac{1}{2}gt^2\\] Solving for \\(t\\) : \\[t_f = \\frac{2v_0\\sin(\\theta)}{g}\\] Maximum Height At maximum height, \\(\\frac{dy}{dt} = 0\\) : \\[0 = v_0\\sin(\\theta) - gt_h\\] Solving for \\(t_h\\) : \\[t_h = \\frac{v_0\\sin(\\theta)}{g}\\] The maximum height is then: \\[H = v_0\\sin(\\theta)t_h - \\frac{1}{2}gt_h^2$$ $$H = \\frac{(v_0\\sin(\\theta))^2}{2g}\\] Range of the Projectile The range is the horizontal distance when \\(y = 0\\) after time \\(t_f\\) : \\[R = v_0\\cos(\\theta)t_f$$ $$R = \\frac{v_0^2\\sin(2\\theta)}{g}\\] Effect of Initial Conditions Variations in \\(v_0\\) , \\(\\theta\\) , and \\(g\\) affect the projectile's motion: 1. Initial Velocity ( \\(v_0\\) ) : Higher \\(v_0\\) increases range and height. 2. Angle of Projection ( \\(\\theta\\) ) : The range is maximized at \\(45^\\circ\\) . 3. Gravitational Acceleration ( \\(g\\) ) : A larger \\(g\\) reduces range and height, relevant for different planetary bodies. 2. Analysis of the Range Dependence on the Angle of Projection The range \\(R\\) of a projectile is given by: \\[R = \\frac{v_0^2\\sin(2\\theta)}{g}\\] This equation shows that \\(R\\) depends on the angle of projection \\(\\theta\\) . The function \\(\\sin(2\\theta)\\) reaches its maximum at \\(\\theta = 45^\\circ\\) , meaning the maximum range occurs at this angle. For small angles ( \\(\\theta < 45^\\circ\\) ), the projectile does not reach significant height, reducing its flight time and range. For large angles ( \\(\\theta > 45^\\circ\\) ), more velocity is directed vertically, increasing height but reducing horizontal distance. Effect of Initial Velocity Since \\(R\\) is proportional to \\(v_0^2\\) : \\[R \\propto v_0^2\\] Increasing \\(v_0\\) increases the range quadratically. A small increase in \\(v_0\\) significantly extends the distance traveled by the projectile. Effect of Gravitational Acceleration Since \\(R\\) is inversely proportional to \\(g\\) : \\[R \\propto \\frac{1}{g}\\] A lower gravitational acceleration (e.g., on the Moon) results in a larger range. A higher \\(g\\) (e.g., on Jupiter) reduces the range due to increased downward pull. Summary of Key Findings Optimal angle for maximum range : \\(45^\\circ\\) Range increases quadratically with initial velocity. Range decreases with increasing gravitational acceleration . These findings are essential in real-world applications such as ballistics, sports science, and aerospace engineering. 3. Practical Applications Projectile Motion in Real-World Scenarios 1. Sports Science Basketball and Soccer : Players adjust their shooting or kicking angles to optimize range and accuracy. Javelin and Discus Throw : Athletes use biomechanics to maximize distance by choosing optimal launch angles and speeds. 2. Military and Ballistics Artillery Trajectories : Engineers use projectile equations to optimize the firing angles of missiles and shells. Guided Projectiles : Advanced calculations incorporate factors such as wind resistance and Coriolis effects. 3. Aerospace Engineering Rocket Launches : Rockets follow projectile motion principles during initial launch phases before entering controlled flight. Lunar and Martian Environments : Lower gravity alters projectile trajectories, requiring adjustments in calculations. 4. Environmental and Engineering Applications Landslide and Avalanche Predictions : Scientists model falling debris as projectiles to estimate impact zones. Construction and Demolition : Engineers predict debris trajectories in controlled explosions. 5. Effects of Air Resistance and Uneven Terrain Air Resistance : Real-world projectiles experience drag, reducing range compared to ideal equations. Uneven Terrain : Adjustments in launch height and ground impact calculations affect final displacement. Conclusion Understanding projectile motion has widespread applications across multiple fields, from sports and defense to space exploration and engineering. Incorporating additional real-world factors, such as drag and varying gravitational fields, further refines these models, making them essential tools in practical scenarios. Python/Plot import numpy as np import matplotlib.pyplot as plt def compute_projectile_range(angle, v0, g=9.81): \"\"\" Calculate the range of a projectile based on launch angle and initial velocity. Parameters: angle : float Launch angle in degrees. v0 : float Initial velocity (m/s). g : float Gravitational acceleration (m/s^2). Default is Earth's gravity. Returns: float Projectile range in meters. \"\"\" angle_rad = np.radians(angle) return (v0**2 * np.sin(2 * angle_rad)) / g def simulate_and_plot_projectile(v0=20, angles=None, g=9.81): \"\"\" Simulates projectile motion for a range of angles and plots the results. Parameters: v0 : float Initial velocity (m/s). angles : array-like List or array of launch angles in degrees. Default is np.linspace(10, 80, 10). g : float Gravitational acceleration (m/s^2). Default is Earth's gravity. \"\"\" if angles is None: angles = np.linspace(10, 80, 10) # Calculate ranges for all specified angles ranges = [compute_projectile_range(angle, v0, g) for angle in angles] # Plot the results plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, marker='o', linestyle='-', color='blue') plt.xlabel(\"Launch Angle (degrees)\", fontsize=12) plt.ylabel(\"Range (meters)\", fontsize=12) plt.title(f\"Projectile Range vs. Launch Angle\\n(Initial Velocity = {v0} m/s, Angles = {len(angles)})\", fontsize=14) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show() if __name__ == \"__main__\": # Example of usage simulate_and_plot_projectile(v0=30) link: colab","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations-of-motion","text":"Projectile motion is governed by Newtonian mechanics. Assuming no air resistance, the motion can be described using kinematic equations under uniform gravitational acceleration.","title":"Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"The position of the projectile as a function of time can be written as: \\(x(t) = v_0\\cos(\\theta)t\\) \\(y(t) = v_0\\sin(\\theta)t - \\frac{1}{2}gt^2\\) where: - \\(x(t)\\) and \\(y(t)\\) are the horizontal and vertical positions at time \\(t\\) , - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the angle of projection, - \\(g\\) is the acceleration due to gravity.","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solving-the-differential-equations","text":"From Newton\u2019s Second Law, the acceleration components are: \\[\\frac{d^2x}{dt^2} = 0, \\quad \\frac{d^2y}{dt^2} = -g\\] Integrating these equations: \\[\\frac{dx}{dt} = v_0\\cos(\\theta), \\quad \\frac{dy}{dt} = v_0\\sin(\\theta) - gt\\] Another integration gives: \\[x = v_0\\cos(\\theta)t$$ $$y = v_0\\sin(\\theta)t - \\frac{1}{2}gt^2\\]","title":"Solving the Differential Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight-maximum-height-and-range","text":"","title":"Time of Flight, Maximum Height, and Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The time when the projectile returns to the ground \\(y = 0\\) : \\[0 = v_0\\sin(\\theta)t - \\frac{1}{2}gt^2\\] Solving for \\(t\\) : \\[t_f = \\frac{2v_0\\sin(\\theta)}{g}\\]","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#maximum-height","text":"At maximum height, \\(\\frac{dy}{dt} = 0\\) : \\[0 = v_0\\sin(\\theta) - gt_h\\] Solving for \\(t_h\\) : \\[t_h = \\frac{v_0\\sin(\\theta)}{g}\\] The maximum height is then: \\[H = v_0\\sin(\\theta)t_h - \\frac{1}{2}gt_h^2$$ $$H = \\frac{(v_0\\sin(\\theta))^2}{2g}\\]","title":"Maximum Height"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-of-the-projectile","text":"The range is the horizontal distance when \\(y = 0\\) after time \\(t_f\\) : \\[R = v_0\\cos(\\theta)t_f$$ $$R = \\frac{v_0^2\\sin(2\\theta)}{g}\\]","title":"Range of the Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-initial-conditions","text":"Variations in \\(v_0\\) , \\(\\theta\\) , and \\(g\\) affect the projectile's motion: 1. Initial Velocity ( \\(v_0\\) ) : Higher \\(v_0\\) increases range and height. 2. Angle of Projection ( \\(\\theta\\) ) : The range is maximized at \\(45^\\circ\\) . 3. Gravitational Acceleration ( \\(g\\) ) : A larger \\(g\\) reduces range and height, relevant for different planetary bodies.","title":"Effect of Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-the-angle-of-projection","text":"The range \\(R\\) of a projectile is given by: \\[R = \\frac{v_0^2\\sin(2\\theta)}{g}\\] This equation shows that \\(R\\) depends on the angle of projection \\(\\theta\\) . The function \\(\\sin(2\\theta)\\) reaches its maximum at \\(\\theta = 45^\\circ\\) , meaning the maximum range occurs at this angle. For small angles ( \\(\\theta < 45^\\circ\\) ), the projectile does not reach significant height, reducing its flight time and range. For large angles ( \\(\\theta > 45^\\circ\\) ), more velocity is directed vertically, increasing height but reducing horizontal distance.","title":"Dependence on the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-initial-velocity","text":"Since \\(R\\) is proportional to \\(v_0^2\\) : \\[R \\propto v_0^2\\] Increasing \\(v_0\\) increases the range quadratically. A small increase in \\(v_0\\) significantly extends the distance traveled by the projectile.","title":"Effect of Initial Velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-gravitational-acceleration","text":"Since \\(R\\) is inversely proportional to \\(g\\) : \\[R \\propto \\frac{1}{g}\\] A lower gravitational acceleration (e.g., on the Moon) results in a larger range. A higher \\(g\\) (e.g., on Jupiter) reduces the range due to increased downward pull.","title":"Effect of Gravitational Acceleration"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary-of-key-findings","text":"Optimal angle for maximum range : \\(45^\\circ\\) Range increases quadratically with initial velocity. Range decreases with increasing gravitational acceleration . These findings are essential in real-world applications such as ballistics, sports science, and aerospace engineering.","title":"Summary of Key Findings"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-in-real-world-scenarios","text":"","title":"Projectile Motion in Real-World Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-sports-science","text":"Basketball and Soccer : Players adjust their shooting or kicking angles to optimize range and accuracy. Javelin and Discus Throw : Athletes use biomechanics to maximize distance by choosing optimal launch angles and speeds.","title":"1. Sports Science"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-military-and-ballistics","text":"Artillery Trajectories : Engineers use projectile equations to optimize the firing angles of missiles and shells. Guided Projectiles : Advanced calculations incorporate factors such as wind resistance and Coriolis effects.","title":"2. Military and Ballistics"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-aerospace-engineering","text":"Rocket Launches : Rockets follow projectile motion principles during initial launch phases before entering controlled flight. Lunar and Martian Environments : Lower gravity alters projectile trajectories, requiring adjustments in calculations.","title":"3. Aerospace Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-environmental-and-engineering-applications","text":"Landslide and Avalanche Predictions : Scientists model falling debris as projectiles to estimate impact zones. Construction and Demolition : Engineers predict debris trajectories in controlled explosions.","title":"4. Environmental and Engineering Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-effects-of-air-resistance-and-uneven-terrain","text":"Air Resistance : Real-world projectiles experience drag, reducing range compared to ideal equations. Uneven Terrain : Adjustments in launch height and ground impact calculations affect final displacement.","title":"5. Effects of Air Resistance and Uneven Terrain"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"Understanding projectile motion has widespread applications across multiple fields, from sports and defense to space exploration and engineering. Incorporating additional real-world factors, such as drag and varying gravitational fields, further refines these models, making them essential tools in practical scenarios.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#pythonplot","text":"import numpy as np import matplotlib.pyplot as plt def compute_projectile_range(angle, v0, g=9.81): \"\"\" Calculate the range of a projectile based on launch angle and initial velocity. Parameters: angle : float Launch angle in degrees. v0 : float Initial velocity (m/s). g : float Gravitational acceleration (m/s^2). Default is Earth's gravity. Returns: float Projectile range in meters. \"\"\" angle_rad = np.radians(angle) return (v0**2 * np.sin(2 * angle_rad)) / g def simulate_and_plot_projectile(v0=20, angles=None, g=9.81): \"\"\" Simulates projectile motion for a range of angles and plots the results. Parameters: v0 : float Initial velocity (m/s). angles : array-like List or array of launch angles in degrees. Default is np.linspace(10, 80, 10). g : float Gravitational acceleration (m/s^2). Default is Earth's gravity. \"\"\" if angles is None: angles = np.linspace(10, 80, 10) # Calculate ranges for all specified angles ranges = [compute_projectile_range(angle, v0, g) for angle in angles] # Plot the results plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, marker='o', linestyle='-', color='blue') plt.xlabel(\"Launch Angle (degrees)\", fontsize=12) plt.ylabel(\"Range (meters)\", fontsize=12) plt.title(f\"Projectile Range vs. Launch Angle\\n(Initial Velocity = {v0} m/s, Angles = {len(angles)})\", fontsize=14) plt.grid(True, linestyle='--', alpha=0.7) plt.tight_layout() plt.show() if __name__ == \"__main__\": # Example of usage simulate_and_plot_projectile(v0=30) link: colab","title":"Python/Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 \ud83d\udcd8 1. Theoretical Foundation \ud83d\udd27 Governing Equation The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\sin\\theta=A\\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) is the angular displacement as a function of time. - \\(b\\) is the damping coefficient. - \\(g\\) is the gravitational acceleration. - \\(L\\) is the length of the pendulum. - \\(A\\) is the amplitude of the external driving force. - \\(\\omega\\) is the angular frequency of the external force. This equation captures: - The restoring torque from gravity: \\(\\frac{g}{L}\\sin\\theta\\) . - The damping torque : \\(b\\frac{d\\theta}{dt}\\) . - The external driving torque : \\(A\\cos(\\omega t)\\) . \ud83e\uddea Small-Angle Approximation For small oscillations where \\(\\theta\\ll1\\) (in radians), we can linearize the sine term using the Taylor expansion: \\[ \\sin\\theta\\approx\\theta-\\frac{\\theta^3}{6}+\\cdots\\approx\\theta \\] Thus, the equation becomes: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\theta=A\\cos(\\omega t) \\] This is a linear nonhomogeneous differential equation with constant coefficients. \ud83e\uddee Analytical Solution of the Linearized Equation The general solution to the linearized equation: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\omega_0^2\\theta=A\\cos(\\omega t) \\] Where \\(\\omega_0=\\sqrt{\\frac{g}{L}}\\) is the natural frequency of the pendulum. \ud83d\udd39 Solution Structure The complete solution is: \\[ \\theta(t)=\\theta_{\\text{hom}}(t)+\\theta_{\\text{part}}(t) \\] Homogeneous solution (transient response): \\[ \\theta_{\\text{hom}}(t)=e^{-\\frac{b}{2}t}\\left(C_1\\cos(\\omega_d t)+C_2\\sin(\\omega_d t)\\right) \\] where \\(\\omega_d=\\sqrt{\\omega_0^2-\\left(\\frac{b}{2}\\right)^2}\\) is the damped natural frequency. Particular solution (steady-state response): \\[ \\theta_{\\text{part}}(t)=B\\cos(\\omega t-\\delta) \\] With: - \\(B=\\frac{A}{\\sqrt{(\\omega_0^2-\\omega^2)^2+b^2\\omega^2}}\\) (steady-state amplitude) - \\(\\delta=\\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2-\\omega^2}\\right)\\) (phase lag) \ud83c\udfaf Resonance Condition Resonance occurs when the driving frequency approaches the system's natural frequency : For low damping: $$ \\omega_{\\text{res}}\\approx\\omega_0=\\sqrt{\\frac{g}{L}} $$ With damping, the resonance frequency shifts to: $$ \\omega_{\\text{res}}=\\sqrt{\\omega_0^2-\\frac{b^2}{2}} $$ \ud83d\udd38 At resonance: The amplitude \\(B\\) reaches a maximum. The system absorbs energy efficiently from the external force. This can lead to very large oscillations , especially in low-damping systems. \ud83d\udd0b Energy Behavior The total mechanical energy of the pendulum is: \\[ E(t)=\\frac{1}{2}mL^2\\left(\\frac{d\\theta}{dt}\\right)^2+mgL(1-\\cos\\theta) \\] \ud83c\udf00 2. Analysis of Dynamics This section explores how different system parameters influence the motion of a forced damped pendulum. \ud83d\udd27 Parameters of Interest Damping Coefficient \\(b\\) Driving Amplitude \\(A\\) Driving Frequency \\(\\omega\\) We simulate and analyze the pendulum\u2019s behavior under these variations. \ud83e\uddea Governing Equation The equation of motion is: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\sin\\theta=A\\cos(\\omega t) \\] Where: - \\(b\\) is the damping coefficient - \\(A\\) is the driving amplitude - \\(\\omega\\) is the driving frequency \ud83e\uddf0 Simulation Setup We use the Runge-Kutta method via scipy.integrate.solve_ivp to solve the nonlinear ODE numerically. The Python implementation includes: - A model function - A simulation wrapper - Phase space plotting for: - Varying \\(b\\) - Varying \\(A\\) - Varying \\(\\omega\\) \ud83d\udcca Observations 1. Varying Damping Coefficient \\(b\\) Low \\(b\\) : Oscillations persist longer, chaotic behavior possible High \\(b\\) : System rapidly stabilizes or dies out Moderate \\(b\\) : Shows transition from regular to quasiperiodic/chaotic 2. Varying Driving Amplitude \\(A\\) Small \\(A\\) : Almost harmonic oscillations Large \\(A\\) : More energy injected, often leading to period doubling or chaos 3. Varying Driving Frequency \\(\\omega\\) Near resonance \\(\\omega\\approx\\sqrt{g/L}\\) : High amplitude oscillations Off-resonance: Smaller or more irregular oscillations \u26a0\ufe0f From Order to Chaos We can witness: Regular Motion : Clear, periodic cycles Quasiperiodic : Loops with subtle non-repeating behavior Chaotic : Highly sensitive, seemingly random, no repetition These transitions are closely linked to: - Bifurcations - Sensitive dependence on initial conditions - Phase space topology \ud83d\udd01 Physical Interpretation Synchronization : When pendulum oscillates in sync with driving force Period Doubling : Each cycle takes twice as long \u2192 precursor to chaos Chaos : Unpredictable, non-repeating, bounded dynamics Practical Applications of Forced Damped Pendulum Markdown notes \ud83d\udd27 3. Practical Applications The dynamics of a forced damped pendulum are not just academic\u2014they appear in a wide range of engineering and physical systems. \ud83c\udf0d Real-World Systems with Similar Dynamics Energy Harvesting Devices Use mechanical oscillations to convert vibrational energy into electrical power. Suspension Bridges and Mechanical Structures Experience forced oscillations due to wind, traffic, or earthquakes\u2014sometimes leading to resonance. Oscillating Electronic Circuits RLC circuits show the same mathematical structure: damping (resistance), restoring force (capacitance/inductance), and driving voltage. \ud83d\udd0b Energy Harvesting Systems designed to convert kinetic energy into usable electric energy. Examples: piezoelectric generators and electromagnetic harvesters. \ud83d\udcc8 Model Mapping Oscillator: pendulum mass or flexible beam Damping: mechanical friction or electrical loss Driving Force: external vibrations from environment The motion equation: \\[ \\frac{d^2x}{dt^2}+b\\frac{dx}{dt}+\\omega_0^2x=A\\cos(\\omega t) \\] \\(x(t)\\) : displacement of the energy harvester \\(b\\) : damping from internal resistance or air drag \\(\\omega_0\\) : natural frequency \\(A\\) : amplitude of ambient vibration Goal: Tune \\(\\omega\\) near \\(\\omega_0\\) to maximize energy absorption. \ud83c\udf09 Suspension Bridges Exhibit forced oscillations due to wind, pedestrians, or traffic. Famous case: Tacoma Narrows Bridge collapse (1940). \ud83d\udcc8 Model Mapping Bridge as a continuous or lumped mass system Damping from internal structure and air Driving force from periodic wind gusts or synchronized steps Equation form: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\theta=A\\cos(\\omega t) \\] \\(\\theta(t)\\) : angular displacement of bridge segment \\(b\\) : damping due to friction and structure \\(A\\cos(\\omega t)\\) : external wind or excitation \ud83d\udd04 Oscillating Electronic Circuits RLC circuits follow same second-order dynamics: \\[ L\\frac{d^2q}{dt^2}+R\\frac{dq}{dt}+\\frac{q}{C}=V_0\\cos(\\omega t) \\] \\(q(t)\\) : charge on capacitor \\(R\\) : resistance (damping) \\(L\\) : inductance (inertia) \\(1/C\\) : spring constant analogy \\(V_0\\cos(\\omega t)\\) : driving voltage \ud83e\udde0 Insight Like pendulums, these circuits exhibit: Resonance at \\(\\omega=1/\\sqrt{LC}\\) Energy storage in electric and magnetic fields Damped oscillations due to \\(R\\) \u2705 Summary The forced damped pendulum model applies broadly: Mechanical, structural, and electrical systems Universal features: Nonlinearity Damping vs. driving competition Resonance and chaos These insights guide design and safety in engineering. Python/Plot import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants L = 1.0 # Length of pendulum (m) g = 9.81 # Gravity (m/s^2) # Function for Pendulum RHS (Right-Hand Side) def pendulum_rhs(t, y, damping, drive_amplitude, drive_freq): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -damping * omega_theta - (g / L) * np.sin(theta) + drive_amplitude * np.cos(drive_freq * t) return [dtheta_dt, domega_dt] # Function for Simulating Pendulum def simulate_pendulum(damping, drive_amplitude, drive_freq, initial_theta, initial_omega, t_max=100, dt=0.01): t_span = (0, t_max) t_eval = np.arange(0, t_max, dt) y0 = [initial_theta, initial_omega] sol = solve_ivp(pendulum_rhs, t_span, y0, t_eval=t_eval, args=(damping, drive_amplitude, drive_freq), method='RK45') return sol.t, sol.y[0], sol.y[1] # Plotting Time Series (angular displacement) def plot_time_series(t, theta, title=\"Time Series\"): plt.figure(figsize=(10, 4)) plt.plot(t, theta, color='blue') plt.title(title) plt.xlabel(\"Time (s)\") plt.ylabel(\"Theta (rad)\") plt.grid(True) plt.tight_layout() plt.show() # Plotting Phase Portrait (theta vs omega) def plot_phase_portrait(theta, omega, title=\"Phase Portrait\"): plt.figure(figsize=(6, 6)) plt.plot(theta, omega, color='green') plt.title(title) plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.grid(True) plt.tight_layout() plt.show() # --- Scenarios --- # Shared initial conditions initial_theta = 0.1 # Initial angle initial_omega = 0.0 # Initial angular velocity # --- Scenario 1: Simple Pendulum (No damping, no force) --- t, theta, omega = simulate_pendulum(0.0, 0.0, 0.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Simple Pendulum (No damping, No force)\") plot_phase_portrait(theta, omega, title=\"Simple Pendulum Phase Portrait\") # --- Scenario 2: Pendulum with Damping --- t, theta, omega = simulate_pendulum(0.1, 0.0, 0.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Pendulum with Damping\") plot_phase_portrait(theta, omega, title=\"Pendulum with Damping Phase Portrait\") # --- Scenario 3: Pendulum with External Force --- t, theta, omega = simulate_pendulum(0.0, 1.0, 2.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Pendulum with External Force\") plot_phase_portrait(theta, omega, title=\"Pendulum with External Force Phase Portrait\") # --- Scenario 4: Pendulum with Damping and External Force --- t, theta, omega = simulate_pendulum(0.1, 1.0, 2.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Pendulum with Damping and External Force\") plot_phase_portrait(theta, omega, title=\"Pendulum with Damping and External Force Phase Portrait\") # --- Scenario 5: Resonance or Chaos (Driving at resonant frequency) --- resonant_freq = np.sqrt(g / L) t, theta, omega = simulate_pendulum(0.1, 1.0, resonant_freq, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Resonant Scenario (Pendulum with Damping and External Force)\") plot_phase_portrait(theta, omega, title=\"Resonant Scenario Phase Portrait\")","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"\ud83d\udcd8 1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\sin\\theta=A\\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) is the angular displacement as a function of time. - \\(b\\) is the damping coefficient. - \\(g\\) is the gravitational acceleration. - \\(L\\) is the length of the pendulum. - \\(A\\) is the amplitude of the external driving force. - \\(\\omega\\) is the angular frequency of the external force. This equation captures: - The restoring torque from gravity: \\(\\frac{g}{L}\\sin\\theta\\) . - The damping torque : \\(b\\frac{d\\theta}{dt}\\) . - The external driving torque : \\(A\\cos(\\omega t)\\) .","title":"\ud83d\udd27 Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small oscillations where \\(\\theta\\ll1\\) (in radians), we can linearize the sine term using the Taylor expansion: \\[ \\sin\\theta\\approx\\theta-\\frac{\\theta^3}{6}+\\cdots\\approx\\theta \\] Thus, the equation becomes: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\theta=A\\cos(\\omega t) \\] This is a linear nonhomogeneous differential equation with constant coefficients.","title":"\ud83e\uddea Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analytical-solution-of-the-linearized-equation","text":"The general solution to the linearized equation: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\omega_0^2\\theta=A\\cos(\\omega t) \\] Where \\(\\omega_0=\\sqrt{\\frac{g}{L}}\\) is the natural frequency of the pendulum.","title":"\ud83e\uddee Analytical Solution of the Linearized Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solution-structure","text":"The complete solution is: \\[ \\theta(t)=\\theta_{\\text{hom}}(t)+\\theta_{\\text{part}}(t) \\] Homogeneous solution (transient response): \\[ \\theta_{\\text{hom}}(t)=e^{-\\frac{b}{2}t}\\left(C_1\\cos(\\omega_d t)+C_2\\sin(\\omega_d t)\\right) \\] where \\(\\omega_d=\\sqrt{\\omega_0^2-\\left(\\frac{b}{2}\\right)^2}\\) is the damped natural frequency. Particular solution (steady-state response): \\[ \\theta_{\\text{part}}(t)=B\\cos(\\omega t-\\delta) \\] With: - \\(B=\\frac{A}{\\sqrt{(\\omega_0^2-\\omega^2)^2+b^2\\omega^2}}\\) (steady-state amplitude) - \\(\\delta=\\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2-\\omega^2}\\right)\\) (phase lag)","title":"\ud83d\udd39 Solution Structure"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency approaches the system's natural frequency : For low damping: $$ \\omega_{\\text{res}}\\approx\\omega_0=\\sqrt{\\frac{g}{L}} $$ With damping, the resonance frequency shifts to: $$ \\omega_{\\text{res}}=\\sqrt{\\omega_0^2-\\frac{b^2}{2}} $$","title":"\ud83c\udfaf Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#at-resonance","text":"The amplitude \\(B\\) reaches a maximum. The system absorbs energy efficiently from the external force. This can lead to very large oscillations , especially in low-damping systems.","title":"\ud83d\udd38 At resonance:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#energy-behavior","text":"The total mechanical energy of the pendulum is: \\[ E(t)=\\frac{1}{2}mL^2\\left(\\frac{d\\theta}{dt}\\right)^2+mgL(1-\\cos\\theta) \\]","title":"\ud83d\udd0b Energy Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"This section explores how different system parameters influence the motion of a forced damped pendulum.","title":"\ud83c\udf00 2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters-of-interest","text":"Damping Coefficient \\(b\\) Driving Amplitude \\(A\\) Driving Frequency \\(\\omega\\) We simulate and analyze the pendulum\u2019s behavior under these variations.","title":"\ud83d\udd27 Parameters of Interest"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation_1","text":"The equation of motion is: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\sin\\theta=A\\cos(\\omega t) \\] Where: - \\(b\\) is the damping coefficient - \\(A\\) is the driving amplitude - \\(\\omega\\) is the driving frequency","title":"\ud83e\uddea Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simulation-setup","text":"We use the Runge-Kutta method via scipy.integrate.solve_ivp to solve the nonlinear ODE numerically. The Python implementation includes: - A model function - A simulation wrapper - Phase space plotting for: - Varying \\(b\\) - Varying \\(A\\) - Varying \\(\\omega\\)","title":"\ud83e\uddf0 Simulation Setup"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#observations","text":"","title":"\ud83d\udcca Observations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-varying-damping-coefficient-b","text":"Low \\(b\\) : Oscillations persist longer, chaotic behavior possible High \\(b\\) : System rapidly stabilizes or dies out Moderate \\(b\\) : Shows transition from regular to quasiperiodic/chaotic","title":"1. Varying Damping Coefficient \\(b\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-varying-driving-amplitude-a","text":"Small \\(A\\) : Almost harmonic oscillations Large \\(A\\) : More energy injected, often leading to period doubling or chaos","title":"2. Varying Driving Amplitude \\(A\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-varying-driving-frequency-omega","text":"Near resonance \\(\\omega\\approx\\sqrt{g/L}\\) : High amplitude oscillations Off-resonance: Smaller or more irregular oscillations","title":"3. Varying Driving Frequency \\(\\omega\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#from-order-to-chaos","text":"We can witness: Regular Motion : Clear, periodic cycles Quasiperiodic : Loops with subtle non-repeating behavior Chaotic : Highly sensitive, seemingly random, no repetition These transitions are closely linked to: - Bifurcations - Sensitive dependence on initial conditions - Phase space topology","title":"\u26a0\ufe0f From Order to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#physical-interpretation","text":"Synchronization : When pendulum oscillates in sync with driving force Period Doubling : Each cycle takes twice as long \u2192 precursor to chaos Chaos : Unpredictable, non-repeating, bounded dynamics","title":"\ud83d\udd01 Physical Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications-of-forced-damped-pendulum","text":"","title":"Practical Applications of Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#markdown-notes","text":"","title":"Markdown notes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The dynamics of a forced damped pendulum are not just academic\u2014they appear in a wide range of engineering and physical systems.","title":"\ud83d\udd27 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#real-world-systems-with-similar-dynamics","text":"Energy Harvesting Devices Use mechanical oscillations to convert vibrational energy into electrical power. Suspension Bridges and Mechanical Structures Experience forced oscillations due to wind, traffic, or earthquakes\u2014sometimes leading to resonance. Oscillating Electronic Circuits RLC circuits show the same mathematical structure: damping (resistance), restoring force (capacitance/inductance), and driving voltage.","title":"\ud83c\udf0d Real-World Systems with Similar Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#energy-harvesting","text":"Systems designed to convert kinetic energy into usable electric energy. Examples: piezoelectric generators and electromagnetic harvesters.","title":"\ud83d\udd0b Energy Harvesting"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#model-mapping","text":"Oscillator: pendulum mass or flexible beam Damping: mechanical friction or electrical loss Driving Force: external vibrations from environment The motion equation: \\[ \\frac{d^2x}{dt^2}+b\\frac{dx}{dt}+\\omega_0^2x=A\\cos(\\omega t) \\] \\(x(t)\\) : displacement of the energy harvester \\(b\\) : damping from internal resistance or air drag \\(\\omega_0\\) : natural frequency \\(A\\) : amplitude of ambient vibration Goal: Tune \\(\\omega\\) near \\(\\omega_0\\) to maximize energy absorption.","title":"\ud83d\udcc8 Model Mapping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#suspension-bridges","text":"Exhibit forced oscillations due to wind, pedestrians, or traffic. Famous case: Tacoma Narrows Bridge collapse (1940).","title":"\ud83c\udf09 Suspension Bridges"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#model-mapping_1","text":"Bridge as a continuous or lumped mass system Damping from internal structure and air Driving force from periodic wind gusts or synchronized steps Equation form: \\[ \\frac{d^2\\theta}{dt^2}+b\\frac{d\\theta}{dt}+\\frac{g}{L}\\theta=A\\cos(\\omega t) \\] \\(\\theta(t)\\) : angular displacement of bridge segment \\(b\\) : damping due to friction and structure \\(A\\cos(\\omega t)\\) : external wind or excitation","title":"\ud83d\udcc8 Model Mapping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#oscillating-electronic-circuits","text":"RLC circuits follow same second-order dynamics: \\[ L\\frac{d^2q}{dt^2}+R\\frac{dq}{dt}+\\frac{q}{C}=V_0\\cos(\\omega t) \\] \\(q(t)\\) : charge on capacitor \\(R\\) : resistance (damping) \\(L\\) : inductance (inertia) \\(1/C\\) : spring constant analogy \\(V_0\\cos(\\omega t)\\) : driving voltage","title":"\ud83d\udd04 Oscillating Electronic Circuits"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#insight","text":"Like pendulums, these circuits exhibit: Resonance at \\(\\omega=1/\\sqrt{LC}\\) Energy storage in electric and magnetic fields Damped oscillations due to \\(R\\)","title":"\ud83e\udde0 Insight"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#summary","text":"The forced damped pendulum model applies broadly: Mechanical, structural, and electrical systems Universal features: Nonlinearity Damping vs. driving competition Resonance and chaos","title":"\u2705 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#these-insights-guide-design-and-safety-in-engineering","text":"","title":"These insights guide design and safety in engineering."},{"location":"1%20Physics/1%20Mechanics/Problem_2/#pythonplot","text":"","title":"Python/Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_1","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_2","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_3","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_4","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_5","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_6","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_7","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_8","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_9","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants L = 1.0 # Length of pendulum (m) g = 9.81 # Gravity (m/s^2) # Function for Pendulum RHS (Right-Hand Side) def pendulum_rhs(t, y, damping, drive_amplitude, drive_freq): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -damping * omega_theta - (g / L) * np.sin(theta) + drive_amplitude * np.cos(drive_freq * t) return [dtheta_dt, domega_dt] # Function for Simulating Pendulum def simulate_pendulum(damping, drive_amplitude, drive_freq, initial_theta, initial_omega, t_max=100, dt=0.01): t_span = (0, t_max) t_eval = np.arange(0, t_max, dt) y0 = [initial_theta, initial_omega] sol = solve_ivp(pendulum_rhs, t_span, y0, t_eval=t_eval, args=(damping, drive_amplitude, drive_freq), method='RK45') return sol.t, sol.y[0], sol.y[1] # Plotting Time Series (angular displacement) def plot_time_series(t, theta, title=\"Time Series\"): plt.figure(figsize=(10, 4)) plt.plot(t, theta, color='blue') plt.title(title) plt.xlabel(\"Time (s)\") plt.ylabel(\"Theta (rad)\") plt.grid(True) plt.tight_layout() plt.show() # Plotting Phase Portrait (theta vs omega) def plot_phase_portrait(theta, omega, title=\"Phase Portrait\"): plt.figure(figsize=(6, 6)) plt.plot(theta, omega, color='green') plt.title(title) plt.xlabel(\"Theta (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.grid(True) plt.tight_layout() plt.show() # --- Scenarios --- # Shared initial conditions initial_theta = 0.1 # Initial angle initial_omega = 0.0 # Initial angular velocity # --- Scenario 1: Simple Pendulum (No damping, no force) --- t, theta, omega = simulate_pendulum(0.0, 0.0, 0.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Simple Pendulum (No damping, No force)\") plot_phase_portrait(theta, omega, title=\"Simple Pendulum Phase Portrait\") # --- Scenario 2: Pendulum with Damping --- t, theta, omega = simulate_pendulum(0.1, 0.0, 0.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Pendulum with Damping\") plot_phase_portrait(theta, omega, title=\"Pendulum with Damping Phase Portrait\") # --- Scenario 3: Pendulum with External Force --- t, theta, omega = simulate_pendulum(0.0, 1.0, 2.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Pendulum with External Force\") plot_phase_portrait(theta, omega, title=\"Pendulum with External Force Phase Portrait\") # --- Scenario 4: Pendulum with Damping and External Force --- t, theta, omega = simulate_pendulum(0.1, 1.0, 2.0, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Pendulum with Damping and External Force\") plot_phase_portrait(theta, omega, title=\"Pendulum with Damping and External Force Phase Portrait\") # --- Scenario 5: Resonance or Chaos (Driving at resonant frequency) --- resonant_freq = np.sqrt(g / L) t, theta, omega = simulate_pendulum(0.1, 1.0, resonant_freq, initial_theta, initial_omega) plot_time_series(t, theta, title=\"Resonant Scenario (Pendulum with Damping and External Force)\") plot_phase_portrait(theta, omega, title=\"Resonant Scenario Phase Portrait\")","title":""},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}